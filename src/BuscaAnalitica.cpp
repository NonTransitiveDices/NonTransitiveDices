    #include <iostream>
    #include <iomanip>
    #include <algorithm>

    using namespace std;
    
    char letters[] = {'A', 'B', 'C', 'D', 'E', 'F'};
    string generateGame(int *numAtF)
    {
        stringstream result;

        for (int i = 0; i < 6; i++)
            for (int j = 0; j < numAtF[i]; j++)
                result << letters[i];

        return result.str();
    }

    bool specialp (string permutation)
    {
        int numX[6];
        int numXY[6][6];
        for (int i = 0; i < 6; i++) {
            numX[i] = 0;
            for (int j = 0; j < 6; j++) {
                numXY[i][j] = 0;
            }
        }

        for (uint64_t i = 0; i < 36; i++){
            switch(permutation[i]){
                case 'A':
                    numX[0]++;
                    for (int j = 0+1; j < 6; j++)
                        numXY[0][j] += numX[j];
                    break;
                case 'B':
                    numX[1]++;
                    for (int j = 1+1; j < 6; j++)
                        numXY[1][j] += numX[j];
                    break;
                case 'C':
                    numX[2]++;
                    for (int j = 2+1; j < 6; j++)
                        numXY[2][j] += numX[j];
                    break;
                case 'D':
                    numX[3]++;
                    for (int j = 3+1; j < 6; j++)
                        numXY[3][j] += numX[j];
                    break;
                case 'E':
                    numX[4]++;
                    for (int j = 4+1; j < 6; j++)
                        numXY[4][j] += numX[j];
                    break;
                case 'F':
                    numX[5]++;
                    for (int j = 5+1; j < 6; j++)
                        numXY[5][j] += numX[j];
                    break;
            }
        }
        for (int i = 0; i < 6; i++) {
            for (int j = i+1; j < 6; j++) {
                numXY[j][i] = 36 - numXY[i][j];
            }
        }

        // print matrx
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                cout << setw(3) << numXY[i][j];
            }
            cout << endl;
        }

        int index[][7] = {
            {0, 1, 2, 3, 4, 5, 0}, {0, 1, 2, 3, 5, 4, 0}, {0, 1, 2, 4, 3, 5, 0}, {0, 1, 2, 4, 5, 3, 0},
            {0, 1, 2, 5, 3, 4, 0}, {0, 1, 2, 5, 4, 3, 0}, {0, 1, 3, 2, 4, 5, 0}, {0, 1, 3, 2, 5, 4, 0},
            {0, 1, 3, 4, 2, 5, 0}, {0, 1, 3, 4, 5, 2, 0}, {0, 1, 3, 5, 2, 4, 0}, {0, 1, 3, 5, 4, 2, 0},
            {0, 1, 4, 2, 3, 5, 0}, {0, 1, 4, 2, 5, 3, 0}, {0, 1, 4, 3, 2, 5, 0}, {0, 1, 4, 3, 5, 2, 0},
            {0, 1, 4, 5, 2, 3, 0}, {0, 1, 4, 5, 3, 2, 0}, {0, 1, 5, 2, 3, 4, 0}, {0, 1, 5, 2, 4, 3, 0},
            {0, 1, 5, 3, 2, 4, 0}, {0, 1, 5, 3, 4, 2, 0}, {0, 1, 5, 4, 2, 3, 0}, {0, 1, 5, 4, 3, 2, 0},
            {0, 2, 1, 3, 4, 5, 0}, {0, 2, 1, 3, 5, 4, 0}, {0, 2, 1, 4, 3, 5, 0}, {0, 2, 1, 4, 5, 3, 0},
            {0, 2, 1, 5, 3, 4, 0}, {0, 2, 1, 5, 4, 3, 0}, {0, 2, 3, 1, 4, 5, 0}, {0, 2, 3, 1, 5, 4, 0},
            {0, 2, 3, 4, 1, 5, 0}, {0, 2, 3, 4, 5, 1, 0}, {0, 2, 3, 5, 1, 4, 0}, {0, 2, 3, 5, 4, 1, 0},
            {0, 2, 4, 1, 3, 5, 0}, {0, 2, 4, 1, 5, 3, 0}, {0, 2, 4, 3, 1, 5, 0}, {0, 2, 4, 3, 5, 1, 0},
            {0, 2, 4, 5, 1, 3, 0}, {0, 2, 4, 5, 3, 1, 0}, {0, 2, 5, 1, 3, 4, 0}, {0, 2, 5, 1, 4, 3, 0},
            {0, 2, 5, 3, 1, 4, 0}, {0, 2, 5, 3, 4, 1, 0}, {0, 2, 5, 4, 1, 3, 0}, {0, 2, 5, 4, 3, 1, 0},
            {0, 3, 1, 2, 4, 5, 0}, {0, 3, 1, 2, 5, 4, 0}, {0, 3, 1, 4, 2, 5, 0}, {0, 3, 1, 4, 5, 2, 0},
            {0, 3, 1, 5, 2, 4, 0}, {0, 3, 1, 5, 4, 2, 0}, {0, 3, 2, 1, 4, 5, 0}, {0, 3, 2, 1, 5, 4, 0},
            {0, 3, 2, 4, 1, 5, 0}, {0, 3, 2, 4, 5, 1, 0}, {0, 3, 2, 5, 1, 4, 0}, {0, 3, 2, 5, 4, 1, 0},
            {0, 3, 4, 1, 2, 5, 0}, {0, 3, 4, 1, 5, 2, 0}, {0, 3, 4, 2, 1, 5, 0}, {0, 3, 4, 2, 5, 1, 0},
            {0, 3, 4, 5, 1, 2, 0}, {0, 3, 4, 5, 2, 1, 0}, {0, 3, 5, 1, 2, 4, 0}, {0, 3, 5, 1, 4, 2, 0},
            {0, 3, 5, 2, 1, 4, 0}, {0, 3, 5, 2, 4, 1, 0}, {0, 3, 5, 4, 1, 2, 0}, {0, 3, 5, 4, 2, 1, 0},
            {0, 4, 1, 2, 3, 5, 0}, {0, 4, 1, 2, 5, 3, 0}, {0, 4, 1, 3, 2, 5, 0}, {0, 4, 1, 3, 5, 2, 0},
            {0, 4, 1, 5, 2, 3, 0}, {0, 4, 1, 5, 3, 2, 0}, {0, 4, 2, 1, 3, 5, 0}, {0, 4, 2, 1, 5, 3, 0},
            {0, 4, 2, 3, 1, 5, 0}, {0, 4, 2, 3, 5, 1, 0}, {0, 4, 2, 5, 1, 3, 0}, {0, 4, 2, 5, 3, 1, 0},
            {0, 4, 3, 1, 2, 5, 0}, {0, 4, 3, 1, 5, 2, 0}, {0, 4, 3, 2, 1, 5, 0}, {0, 4, 3, 2, 5, 1, 0},
            {0, 4, 3, 5, 1, 2, 0}, {0, 4, 3, 5, 2, 1, 0}, {0, 4, 5, 1, 2, 3, 0}, {0, 4, 5, 1, 3, 2, 0},
            {0, 4, 5, 2, 1, 3, 0}, {0, 4, 5, 2, 3, 1, 0}, {0, 4, 5, 3, 1, 2, 0}, {0, 4, 5, 3, 2, 1, 0},
            {0, 5, 1, 2, 3, 4, 0}, {0, 5, 1, 2, 4, 3, 0}, {0, 5, 1, 3, 2, 4, 0}, {0, 5, 1, 3, 4, 2, 0},
            {0, 5, 1, 4, 2, 3, 0}, {0, 5, 1, 4, 3, 2, 0}, {0, 5, 2, 1, 3, 4, 0}, {0, 5, 2, 1, 4, 3, 0},
            {0, 5, 2, 3, 1, 4, 0}, {0, 5, 2, 3, 4, 1, 0}, {0, 5, 2, 4, 1, 3, 0}, {0, 5, 2, 4, 3, 1, 0},
            {0, 5, 3, 1, 2, 4, 0}, {0, 5, 3, 1, 4, 2, 0}, {0, 5, 3, 2, 1, 4, 0}, {0, 5, 3, 2, 4, 1, 0},
            {0, 5, 3, 4, 1, 2, 0}, {0, 5, 3, 4, 2, 1, 0}, {0, 5, 4, 1, 2, 3, 0}, {0, 5, 4, 1, 3, 2, 0},
            {0, 5, 4, 2, 1, 3, 0}, {0, 5, 4, 2, 3, 1, 0}, {0, 5, 4, 3, 1, 2, 0}, {0, 5, 4, 3, 2, 1, 0}};
        
        bool acc = true;
        bool result = false;

        for (int numindex = 0; numindex < 1; numindex++) {

            for (int i = 0; i < 6; i++) {
                if (numXY[index[numindex][i]][index[numindex][i+1]] <= 18) {
                    acc = false;
                    break;
                }
            }

            cout << "acc: " << acc << endl;
            
            if (acc) {
                int comparisons[][2] = {{0, 3}, {1,4}, {2,5}};
                // This checks the draws
                for (int j = 0; j < 3; j++) {
                    if (!(numXY[index[numindex][comparisons[j][1]]][index[numindex][comparisons[j][2]]] == 18)) {
                        acc = false;
                        break;
                    }
                }
            }
            
            
            if (acc) {
                for (int i = 0; i < 6; i++) {
                    int sum = 0;
                    for (int j = 0; j < 6; j++) {
                        sum += (numXY[index[numindex][i]][index[numindex][j]] > 18);
                        if (sum > 2) {
                            cout << "sum > 2, que pena" << endl;
                            acc = false;
                            break;
                        }
                    }
                    if (sum != 2) {
                        cout << "sum < 2, que pena" << endl;
                        acc = false;
                        break;
                    }
                }
            }

            result = (result or acc);
            if (result) return result;
        }

        return result;
    }

    void scan_games (string str)
    {
        while (true)
        {
            if(specialp(str)) cout << str << endl;
            
            if(next_permutation(str.begin(), str.end())) continue;
            else break;
        }
    }

    // Driver code
    int main()
    {
        string prefix[] = {
            "AABAAA", "AABAAB", "AABAAC", "AABABA", "AABABB", "AABABC", "AABACA", 
            "AABACB", "AABACC", "AABACD", "AABBAA", "AABBAB", "AABBAC", "AABBBA",
            "AABBBB", "AABBBC", "AABBCA", "AABBCB", "AABBCC", "AABBCD", "AABCAA",
            "AABCAB", "AABCAC", "AABCAD", "AABCBA", "AABCBB", "AABCBC", "AABCBD",
            "AABCCA", "AABCCB", "AABCCC", "AABCCD", "AABCDA", "AABCDB", "AABCDC",
            "AABCDD", "AABCDE", "ABAAAA", "ABAAAB", "ABAAAC", "ABAABA", "ABAABB",
            "ABAABC", "ABAACA", "ABAACB", "ABAACC", "ABAACD", "ABABAA", "ABABAB",
            "ABABAC", "ABABBA", "ABABBB", "ABABBC", "ABABCA", "ABABCB", "ABABCC",
            "ABABCD", "ABACAA", "ABACAB", "ABACAC", "ABACAD", "ABACBA", "ABACBB",
            "ABACBC", "ABACBD", "ABACCA", "ABACCB", "ABACCC", "ABACCD", "ABACDA",
            "ABACDB", "ABACDC", "ABACDD", "ABACDE", "ABBAAA", "ABBAAB", "ABBAAC",
            "ABBABA", "ABBABB", "ABBABC", "ABBACA", "ABBACB", "ABBACC", "ABBACD",
            "ABBBAA", "ABBBAB", "ABBBAC", "ABBBBA", "ABBBBB", "ABBBBC", "ABBBCA",
            "ABBBCB", "ABBBCC", "ABBBCD", "ABBCAA", "ABBCAB", "ABBCAC", "ABBCAD",
            "ABBCBA", "ABBCBB", "ABBCBC", "ABBCBD", "ABBCCA", "ABBCCB", "ABBCCC",
            "ABBCCD", "ABBCDA", "ABBCDB", "ABBCDC", "ABBCDD", "ABBCDE", "ABCAAA",
            "ABCAAB", "ABCAAC", "ABCAAD", "ABCABA", "ABCABB", "ABCABC", "ABCABD",
            "ABCACA", "ABCACB", "ABCACC", "ABCACD", "ABCADA", "ABCADB", "ABCADC",
            "ABCADD", "ABCADE", "ABCBAA", "ABCBAB", "ABCBAC", "ABCBAD", "ABCBBA",
            "ABCBBB", "ABCBBC", "ABCBBD", "ABCBCA", "ABCBCB", "ABCBCC", "ABCBCD",
            "ABCBDA", "ABCBDB", "ABCBDC", "ABCBDD", "ABCBDE", "ABCCAA", "ABCCAB",
            "ABCCAC", "ABCCAD", "ABCCBA", "ABCCBB", "ABCCBC", "ABCCBD", "ABCCCA",
            "ABCCCB", "ABCCCC", "ABCCCD", "ABCCDA", "ABCCDB", "ABCCDC", "ABCCDD",
            "ABCCDE", "ABCDAA", "ABCDAB", "ABCDAC", "ABCDAD", "ABCDAE", "ABCDBA",
            "ABCDBB", "ABCDBC", "ABCDBD", "ABCDBE", "ABCDCA", "ABCDCB", "ABCDCC",
            "ABCDCD", "ABCDCE", "ABCDDA", "ABCDDB", "ABCDDC", "ABCDDD", "ABCDDE",
            "ABCDEA", "ABCDEB", "ABCDEC", "ABCDED", "ABCDEE", "ABCDEF"};

        int numABCD[][6] = {
            {1, 5, 6, 6, 6, 6}, {2, 4, 6, 6, 6, 6}, {2, 5, 5, 6, 6, 6}, {2, 4, 6, 6, 6, 6}, {3, 3, 6, 6, 6, 6},
            {3, 4, 5, 6, 6, 6}, {2, 5, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 5, 4, 6, 6, 6}, {3, 5, 5, 5, 6, 6},
            {2, 4, 6, 6, 6, 6}, {3, 3, 6, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 3, 6, 6, 6, 6}, {4, 2, 6, 6, 6, 6},
            {4, 3, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6},
            {2, 5, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 5, 4, 6, 6, 6}, {3, 5, 5, 5, 6, 6}, {3, 4, 5, 6, 6, 6},
            {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {3, 5, 4, 6, 6, 6}, {4, 4, 4, 6, 6, 6},
            {4, 5, 3, 6, 6, 6}, {4, 5, 4, 5, 6, 6}, {3, 5, 5, 5, 6, 6}, {4, 4, 5, 5, 6, 6}, {4, 5, 4, 5, 6, 6},
            {4, 5, 5, 4, 6, 6}, {4, 5, 5, 5, 5, 6}, {1, 5, 6, 6, 6, 6}, {2, 4, 6, 6, 6, 6}, {2, 5, 5, 6, 6, 6},
            {2, 4, 6, 6, 6, 6}, {3, 3, 6, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {2, 5, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6},
            {3, 5, 4, 6, 6, 6}, {3, 5, 5, 5, 6, 6}, {2, 4, 6, 6, 6, 6}, {3, 3, 6, 6, 6, 6}, {3, 4, 5, 6, 6, 6},
            {3, 3, 6, 6, 6, 6}, {4, 2, 6, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6},
            {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {2, 5, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 5, 4, 6, 6, 6},
            {3, 5, 5, 5, 6, 6}, {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6},
            {3, 5, 4, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 5, 3, 6, 6, 6}, {4, 5, 4, 5, 6, 6}, {3, 5, 5, 5, 6, 6},
            {4, 4, 5, 5, 6, 6}, {4, 5, 4, 5, 6, 6}, {4, 5, 5, 4, 6, 6}, {4, 5, 5, 5, 5, 6}, {2, 4, 6, 6, 6, 6},
            {3, 3, 6, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 3, 6, 6, 6, 6}, {4, 2, 6, 6, 6, 6}, {4, 3, 5, 6, 6, 6},
            {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {3, 3, 6, 6, 6, 6},
            {4, 2, 6, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {4, 2, 6, 6, 6, 6}, {5, 1, 6, 6, 6, 6}, {5, 2, 5, 6, 6, 6},
            {4, 3, 5, 6, 6, 6}, {5, 2, 5, 6, 6, 6}, {5, 3, 4, 6, 6, 6}, {5, 3, 5, 5, 6, 6}, {3, 4, 5, 6, 6, 6},
            {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {4, 3, 5, 6, 6, 6}, {5, 2, 5, 6, 6, 6},
            {5, 3, 4, 6, 6, 6}, {5, 3, 5, 5, 6, 6}, {4, 4, 4, 6, 6, 6}, {5, 3, 4, 6, 6, 6}, {5, 4, 3, 6, 6, 6},
            {5, 4, 4, 5, 6, 6}, {4, 4, 5, 5, 6, 6}, {5, 3, 5, 5, 6, 6}, {5, 4, 4, 5, 6, 6}, {5, 4, 5, 4, 6, 6},
            {5, 4, 5, 5, 5, 6}, {2, 5, 5, 6, 6, 6}, {3, 4, 5, 6, 6, 6}, {3, 5, 4, 6, 6, 6}, {3, 5, 5, 5, 6, 6},
            {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {3, 5, 4, 6, 6, 6},
            {4, 4, 4, 6, 6, 6}, {4, 5, 3, 6, 6, 6}, {4, 5, 4, 5, 6, 6}, {3, 5, 5, 5, 6, 6}, {4, 4, 5, 5, 6, 6},
            {4, 5, 4, 5, 6, 6}, {4, 5, 5, 4, 6, 6}, {4, 5, 5, 5, 5, 6}, {3, 4, 5, 6, 6, 6}, {4, 3, 5, 6, 6, 6},
            {4, 4, 4, 6, 6, 6}, {4, 4, 5, 5, 6, 6}, {4, 3, 5, 6, 6, 6}, {5, 2, 5, 6, 6, 6}, {5, 3, 4, 6, 6, 6},
            {5, 3, 5, 5, 6, 6}, {4, 4, 4, 6, 6, 6}, {5, 3, 4, 6, 6, 6}, {5, 4, 3, 6, 6, 6}, {5, 4, 4, 5, 6, 6},
            {4, 4, 5, 5, 6, 6}, {5, 3, 5, 5, 6, 6}, {5, 4, 4, 5, 6, 6}, {5, 4, 5, 4, 6, 6}, {5, 4, 5, 5, 5, 6},
            {3, 5, 4, 6, 6, 6}, {4, 4, 4, 6, 6, 6}, {4, 5, 3, 6, 6, 6}, {4, 5, 4, 5, 6, 6}, {4, 4, 4, 6, 6, 6},
            {5, 3, 4, 6, 6, 6}, {5, 4, 3, 6, 6, 6}, {5, 4, 4, 5, 6, 6}, {4, 5, 3, 6, 6, 6}, {5, 4, 3, 6, 6, 6},
            {5, 5, 2, 6, 6, 6}, {5, 5, 3, 5, 6, 6}, {4, 5, 4, 5, 6, 6}, {5, 4, 4, 5, 6, 6}, {5, 5, 3, 5, 6, 6},
            {5, 5, 4, 4, 6, 6}, {5, 5, 4, 5, 5, 6}, {3, 5, 5, 5, 6, 6}, {4, 4, 5, 5, 6, 6}, {4, 5, 4, 5, 6, 6},
            {4, 5, 5, 4, 6, 6}, {4, 5, 5, 5, 5, 6}, {4, 4, 5, 5, 6, 6}, {5, 3, 5, 5, 6, 6}, {5, 4, 4, 5, 6, 6},
            {5, 4, 5, 4, 6, 6}, {5, 4, 5, 5, 5, 6}, {4, 5, 4, 5, 6, 6}, {5, 4, 4, 5, 6, 6}, {5, 5, 3, 5, 6, 6},
            {5, 5, 4, 4, 6, 6}, {5, 5, 4, 5, 5, 6}, {4, 5, 5, 4, 6, 6}, {5, 4, 5, 4, 6, 6}, {5, 5, 4, 4, 6, 6},
            {5, 5, 5, 3, 6, 6}, {5, 5, 5, 4, 5, 6}, {4, 5, 5, 5, 5, 6}, {5, 4, 5, 5, 5, 6}, {5, 5, 4, 5, 5, 6},
            {5, 5, 5, 4, 5, 6}, {5, 5, 5, 5, 4, 6}, {5, 5, 5, 5, 5, 5}};

        int a[6] = {6,6,6,6,6,6};
        #pragma omp parallel for
        for(int i = 10; i >= 0; i--){
            scan_games(generateGame(a));
        }
        return 0;
    }

    // int main()
    // {
    //     int a[6] = {6,6,6,6,6,6};
    //     string test = "FFAEFEDEDCDCBCBABAAABBBCCCDDDEEEFFAF";
    //     specialp(test);

    // }